
import unittest
import numpy as np
import math

from lab03_python_package.regression import multi_regress

# Matrix of variables
z_test = np.array([[0, 0],
                   [2, 1],
                   [2.5, 2],
                   [1,3],
                   [4,6],
                   [7,2]])

# Vector with observed values
y_test = np.array([5,10,9,0,3,27])  

# Compute multi regression LSQ
[computed_A , computed_e , computed_rsq] = multi_regress(y_test,z_test)
        
# Add columns of 1 to handle constant        
z_test = np.column_stack((np.ones(6), z_test))
class TestMultiLinearregress(unittest.TestCase):
     
    def test_regression(self):
        
        # Exact coeffiecients,errors and coefficient of determination
        exact_A = np.array([[5],
                   [4],
                   [-3]])
        exact_e = y_test.reshape(-1, 1) - z_test @ exact_A
        exact_rsq = 1

        # Check if all elements of computed_A are close to exact_A
        self.assertTrue(np.all(np.isclose(computed_A, exact_A, atol=1e-1)))

        # Check if all elements of computed_e are close to exact_e
        self.assertTrue(np.all(np.isclose(computed_e, exact_e, atol=1e-1)))

        # Check if computed_rsq is close to exact_rsq
        self.assertAlmostEqual(computed_rsq, exact_rsq, delta=1e-1)

   
if __name__ == '__main__':
    unittest.main()